// <auto-generated />
using System;
using Complex742.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Complex742.Migrations
{
    [DbContext(typeof(Complex742Context))]
    [Migration("20211127130712_Complex742Equipmentv1.0")]
    partial class Complex742Equipmentv10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Complex742.Models.Equipments.Equipment", b =>
                {
                    b.Property<int>("equipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("equipmentId"));

                    b.Property<string>("manufactorerEquipment")
                        .HasColumnType("text");

                    b.Property<int?>("masterEquipmentequipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("modelEquipment")
                        .HasColumnType("text");

                    b.Property<string>("nameEquipment")
                        .HasColumnType("text");

                    b.Property<string>("serialNumberEquipment")
                        .HasColumnType("text");

                    b.Property<int?>("typeEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("equipmentId");

                    b.HasIndex("masterEquipmentequipmentId");

                    b.HasIndex("typeEquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Property", b =>
                {
                    b.Property<int>("propertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("propertyId"));

                    b.Property<string>("nameProperty")
                        .HasColumnType("text");

                    b.Property<int?>("typeEquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("unitProperty")
                        .HasColumnType("text");

                    b.HasKey("propertyId");

                    b.HasIndex("typeEquipmentId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.PropertyValue", b =>
                {
                    b.Property<int>("propertyValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("propertyValueId"));

                    b.Property<int?>("equipmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("propertyId")
                        .HasColumnType("integer");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.HasKey("propertyValueId");

                    b.HasIndex("equipmentId");

                    b.HasIndex("propertyId");

                    b.ToTable("PropertyValue");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.TypeEquipment", b =>
                {
                    b.Property<int>("typeEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("typeEquipmentId"));

                    b.Property<string>("nameType")
                        .HasColumnType("text");

                    b.HasKey("typeEquipmentId");

                    b.ToTable("TypeEquipment");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.TypeWork", b =>
                {
                    b.Property<int>("typeWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("typeWorkId"));

                    b.Property<double>("laboriousness")
                        .HasColumnType("double precision");

                    b.Property<string>("nameWork")
                        .HasColumnType("text");

                    b.Property<double>("periodicityWork")
                        .HasColumnType("double precision");

                    b.Property<int?>("typeEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("typeWorkId");

                    b.HasIndex("typeEquipmentId");

                    b.ToTable("TypeWork");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Work", b =>
                {
                    b.Property<int>("workId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("workId"));

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int?>("equipmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("lastDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.Property<int?>("typeWorkId")
                        .HasColumnType("integer");

                    b.HasKey("workId");

                    b.HasIndex("equipmentId");

                    b.HasIndex("typeWorkId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Equipment", b =>
                {
                    b.HasOne("Complex742.Models.Equipments.Equipment", "masterEquipment")
                        .WithMany()
                        .HasForeignKey("masterEquipmentequipmentId");

                    b.HasOne("Complex742.Models.Equipments.TypeEquipment", "type")
                        .WithMany()
                        .HasForeignKey("typeEquipmentId");

                    b.Navigation("masterEquipment");

                    b.Navigation("type");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Property", b =>
                {
                    b.HasOne("Complex742.Models.Equipments.TypeEquipment", "typeEquipment")
                        .WithMany("propertes")
                        .HasForeignKey("typeEquipmentId");

                    b.Navigation("typeEquipment");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.PropertyValue", b =>
                {
                    b.HasOne("Complex742.Models.Equipments.Equipment", "equipment")
                        .WithMany("propertyValues")
                        .HasForeignKey("equipmentId");

                    b.HasOne("Complex742.Models.Equipments.Property", "property")
                        .WithMany()
                        .HasForeignKey("propertyId");

                    b.Navigation("equipment");

                    b.Navigation("property");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.TypeWork", b =>
                {
                    b.HasOne("Complex742.Models.Equipments.TypeEquipment", "typeEquipment")
                        .WithMany("typeWorks")
                        .HasForeignKey("typeEquipmentId");

                    b.Navigation("typeEquipment");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Work", b =>
                {
                    b.HasOne("Complex742.Models.Equipments.Equipment", "equipment")
                        .WithMany("works")
                        .HasForeignKey("equipmentId");

                    b.HasOne("Complex742.Models.Equipments.TypeWork", "typeWork")
                        .WithMany()
                        .HasForeignKey("typeWorkId");

                    b.Navigation("equipment");

                    b.Navigation("typeWork");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.Equipment", b =>
                {
                    b.Navigation("propertyValues");

                    b.Navigation("works");
                });

            modelBuilder.Entity("Complex742.Models.Equipments.TypeEquipment", b =>
                {
                    b.Navigation("propertes");

                    b.Navigation("typeWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
